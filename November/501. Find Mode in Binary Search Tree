Ques::  
501. Find Mode in Binary Search Tree

Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:

Solution::
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int,int>m;
    void solve(TreeNode * root){
        if(!root)return ;
        solve(root->left);
        m[root->val]++;
        solve(root->right);
    }
public:
    vector<int> findMode(TreeNode* root) {
        solve(root);
        int k =0;
        for(auto &i:m)
          k = max(k , i.second);

        vector<int>v;
        for(auto &i:m)
          if(i.second == k)v.push_back(i.first);
          return v;
    }
};

