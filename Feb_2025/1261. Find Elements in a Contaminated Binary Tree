Problem :: 1261. Find Elements in a Contaminated Binary Tree
Given a binary tree with the following rules:

root.val == 0
For any treeNode:
If treeNode.val has a value x and treeNode.left != null, then treeNode.left.val == 2 * x + 1
If treeNode.val has a value x and treeNode.right != null, then treeNode.right.val == 2 * x + 2
Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.

Implement the FindElements class:

FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.
bool find(int target) Returns true if the target value exists in the recovered binary tree.

Time Complexity :: O(N)
Space Complexity ::O(N)



Code :: 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
    void solve(TreeNode * root , int i){
        if(!root)return ;
        if(root->left)root->left->val = 2*i+1;
        solve(root->left , 2*i+1);
        if(root->right)root->right->val = 2*i+2;
        solve(root->right , 2*i+2);
    }
    bool solve2(TreeNode * root , int target){
        if(!root)return 0;
        if(root->val == target)return 1;
        return solve2(root->left , target) || solve2(root->right  , target);
    }
public:
    TreeNode * head ;
    FindElements(TreeNode* root) {
        if(!root)return ;
        root->val =0;
        solve(root , 0);
        head = root;
    }
    
    bool find(int target) {
         return solve2(head  , target);
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
