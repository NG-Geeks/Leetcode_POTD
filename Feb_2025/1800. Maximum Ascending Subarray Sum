Problem :: 
1800. Maximum Ascending Subarray Sum
Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi  < numsi+1. Note that a subarray of size 1 is ascending.

Time Complexity :: o(N)
Space Complexity ::O(1)


Code :: 
class Solution {
public:
    int maxAscendingSum(vector<int>& nums) {
      int  n = nums.size();
        int currsum = nums[0];
        int maxsum = nums[0];
        int i = 1;
        while(i<n){
            if(nums[i]>nums[i-1]){
                currsum+=nums[i];
            }
            else{
                maxsum = max(maxsum,currsum);
                currsum = nums[i];
            }
            i++;
        }
        maxsum = max(maxsum,currsum);
       return maxsum;
    }
};
