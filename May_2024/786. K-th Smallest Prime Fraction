Problem :: 786. K-th Smallest Prime Fraction
You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.
For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].
Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

Time Commplexity ::O(n^2) // Approach 1
                  O(N) // Approach 2

Space Complexity :: O(N)
Code::
Approach 1
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        vector<pair<float,pair<int,int>>>v;
        for(int i=0 ; i<arr.size() ; i++){
            for(int j=i+1 ; j<arr.size();j++){
                 v.push_back({((float)arr[i])/(float)arr[j], {arr[i],arr[j]}});
            }
        }
        sort(v.begin() , v.end());
        
        return {v[k-1].second.first , v[k-1].second.second};
    }
};
Approach 2
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        // Create a priority queue to store pairs of fractions
        priority_queue<pair<double, pair<int, int>>> pq;

        // Push the fractions formed by dividing each element by
        // the largest element into the priority queue
        for (int i = 0; i < arr.size(); i++)
            pq.push({-1.0 * arr[i] / arr.back(), {i, arr.size() - 1}});
        
        // Iteratively remove the top element (smallest fraction) 
        // and replace it with the next smallest fraction
        while (--k > 0) {
            pair<int, int> cur = pq.top().second;
            pq.pop();
            cur.second--;
            pq.push({-1.0 * arr[cur.first] / arr[cur.second], 
                    {cur.first, cur.second}});
        }
        
        // Retrieve the kth smallest fraction from 
        // the top of the priority queue
        pair<int, int> result = pq.top().second;
        return {arr[result.first], arr[result.second]};
    }
};
