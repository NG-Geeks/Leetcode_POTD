Problem :: 1442. Count Triplets That Can Form Two Arrays of Equal XOR
Given an array of integers arr.
We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).
Let's define a and b as follows:

a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.

Time Complexity :: O(N)
Space Complexity :: O(N)

Code :: 
class Solution {
public:
    int countTriplets(vector<int>& arr) {
        int cnt =0;
        int x =0;
        unordered_map<int,vector<int>>m;
        m[0].push_back(-1);
        for(int i=0 ; i<arr.size() ; i++){
            x^=arr[i];
            if(m.find(x)!=m.end()){
                for(auto j:m[x]){
                    cnt += (i-j-1);
                }
            }
            m[x].push_back(i);
        }
        return cnt;
    }
};
