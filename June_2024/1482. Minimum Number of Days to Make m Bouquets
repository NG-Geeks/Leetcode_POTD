Problem :: 1482. Minimum Number of Days to Make m Bouquets
You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.


Time Complexity :: O(N * log Max - Min)
Space Complexity :: O(1)


#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class Solution {
    bool check(int mid , vector<int>&bloomDay , int m , int k){
        int cnt = 0;
        int day =0;
        for(int i=0 ; i<bloomDay.size() ; i++){
            if(bloomDay[i]<=mid)cnt++;
            else{
                day += cnt/k;
                cnt=0;
            }
        }
        day += cnt/k;
        return day>=m;
    }
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int s = *min_element(bloomDay.begin() , bloomDay.end());
        int e = *max_element(bloomDay.begin() , bloomDay.end());
        int ans = -1;
        while(s<=e){
            int mid = (s+e)/2;
            if(check(mid , bloomDay , m , k)){
                ans = mid;
                e = mid-1;
            }
            else {
                s = mid+1;
            }
        }
        return ans;
    }
};
