
Problem  : 1367. Linked List in Binary Tree

Given a binary tree root and a linked list with head as the first node. 

Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.

Intuition
    Simply check and equate the value of linkedlist and value of 
    root and if found equal then compare the next value else start
    from starting value again of linked list and left and right 
    pointer value of Binary Tree.
Complexity
Time complexity:
O(N*M)
Space complexity:
    O(max(N , M))
Code
class Solution {
public:
    bool s(ListNode* h, TreeNode* r) {
        if(!h) return 1;
        if(!r) return 0;
// check whether current listnode and tree value is equal or not
        if(r->val == h->val) return s(h->next,r->left) || s(h->next,r->right) ;
        return 0;
    }
    
    bool isSubPath(ListNode* head, TreeNode* root) {
        if(!root) return 0;
        if(s(head,root)) return 1; // if tree contains the listnode head
//check whether the left subtree or right subtree contains it
        return isSubPath(head,root->left) || isSubPath(head,root->right) ;
    }
};
